/* состояние(человек,волк,коза,капуста,последняя перевозка) */

состояние(правый,правый,правый,правый,_):-
	write('Приехали'),
	nl,
	write('Итоговая последовательность действий в обратном порядке:'),
	nl.
 
состояние(Человек,Волк,Коза,_,_):-
	Волк=Коза,
	not(Коза=Человек),
	write('Козу съели'),
	nl,
	!,
	fail.

состояние(Человек,_,Коза,Капуста,_):-
  	Капуста=Коза,
	not(Коза=Человек),
	write('Капусту съели'),
	nl,
	!,
	fail.

состояние(правый,Волк,Коза,Капуста,Последний):-
  	not(Последний=ничего),
	write('Поехали порожняком на левый'),
	nl,
  	состояние(левый,Волк,Коза,Капуста,ничего),
	write('Поехали порожняком на левый'),
	nl.

состояние(Вместе,Вместе,Коза,Капуста,Последний):-
  	not(Последний=волк),
	напротив(Вместе,Другой),
  	write('Повезли волка на'),
	write(Другой),
	nl,
	состояние(Другой,Другой,Коза,Капуста,волк),
  	write('Повезли волка на '),
	write(Другой),
	nl.

состояние(Вместе,Волк,Вместе,Капуста,Последний):-
  	not(Последний=коза),
	напротив(Вместе,Другой),
  	write('Повезли козу на '),
	write(Другой),
	nl,
  	состояние(Другой,Волк,Другой,Капуста,коза),
  	write('Повезли козу на '),
	write(Другой),
	nl.

состояние(Вместе,Волк,Коза,Вместе,Последний):-
  	not(Последний=капуста),
	напротив(Вместе,Другой),
  	write('Повезли капусту на '),
	write(Другой),
	nl,
  	состояние(Другой,Волк,Коза,Другой,капуста),
  	write('Повезли капусту на '),
	write(Другой),
	nl.

состояние(левый,Волк,Коза,Капуста,Последний):-
  	not(Последний=ничего),
  	write('Поехали порожняком на правый'),
	nl,
  	состояние(правый,Волк,Коза,Капуста,ничего),
  	write('Поехали порожняком на правый'),
	nl.

напротив(правый,левый).
напротив(левый,правый).

goal:-
	состояние(левый,левый,левый,левый,ничего).